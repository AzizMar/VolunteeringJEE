package entities;
// Generated Jun 6, 2018 5:08:14 AM by Hibernate Tools 4.3.5.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Aspnetusers generated by hbm2java
 */
@Entity
@Table(name = "aspnetusers", catalog = "vasp", uniqueConstraints = @UniqueConstraint(columnNames = "UserName"))
public class Aspnetusers implements java.io.Serializable {

	private String id;
	private String email;
	private boolean emailConfirmed;
	private String passwordHash;
	private String securityStamp;
	private String phoneNumber;
	private boolean phoneNumberConfirmed;
	private boolean twoFactorEnabled;
	private Date lockoutEndDateUtc;
	private boolean lockoutEnabled;
	private int accessFailedCount;
	private String userName;
	private String discriminator;
	private Set<Invitations> invitationses = new HashSet<Invitations>(0);
	private Set<Voluntaryactions> voluntaryactionses = new HashSet<Voluntaryactions>(0);
	private Set<Voluntaryactions> voluntaryactionses_1 = new HashSet<Voluntaryactions>(0);
	private Set<Aspnetuserlogins> aspnetuserloginses = new HashSet<Aspnetuserlogins>(0);
	private Set<Donations> donationses = new HashSet<Donations>(0);
	private Set<Aspnetuserclaims> aspnetuserclaimses = new HashSet<Aspnetuserclaims>(0);
	private Set<Aspnetroles> aspnetroleses = new HashSet<Aspnetroles>(0);

	public Aspnetusers() {
	}

	public Aspnetusers(String id, boolean emailConfirmed, boolean phoneNumberConfirmed, boolean twoFactorEnabled,
			boolean lockoutEnabled, int accessFailedCount, String userName, String discriminator) {
		this.id = id;
		this.emailConfirmed = emailConfirmed;
		this.phoneNumberConfirmed = phoneNumberConfirmed;
		this.twoFactorEnabled = twoFactorEnabled;
		this.lockoutEnabled = lockoutEnabled;
		this.accessFailedCount = accessFailedCount;
		this.userName = userName;
		this.discriminator = discriminator;
	}

	public Aspnetusers(String id, String email, boolean emailConfirmed, String passwordHash, String securityStamp,
			String phoneNumber, boolean phoneNumberConfirmed, boolean twoFactorEnabled, Date lockoutEndDateUtc,
			boolean lockoutEnabled, int accessFailedCount, String userName, String discriminator,
			Set<Invitations> invitationses, Set<Voluntaryactions> voluntaryactionses,
			Set<Voluntaryactions> voluntaryactionses_1, Set<Aspnetuserlogins> aspnetuserloginses,
			Set<Donations> donationses, Set<Aspnetuserclaims> aspnetuserclaimses, Set<Aspnetroles> aspnetroleses) {
		this.id = id;
		this.email = email;
		this.emailConfirmed = emailConfirmed;
		this.passwordHash = passwordHash;
		this.securityStamp = securityStamp;
		this.phoneNumber = phoneNumber;
		this.phoneNumberConfirmed = phoneNumberConfirmed;
		this.twoFactorEnabled = twoFactorEnabled;
		this.lockoutEndDateUtc = lockoutEndDateUtc;
		this.lockoutEnabled = lockoutEnabled;
		this.accessFailedCount = accessFailedCount;
		this.userName = userName;
		this.discriminator = discriminator;
		this.invitationses = invitationses;
		this.voluntaryactionses = voluntaryactionses;
		this.voluntaryactionses_1 = voluntaryactionses_1;
		this.aspnetuserloginses = aspnetuserloginses;
		this.donationses = donationses;
		this.aspnetuserclaimses = aspnetuserclaimses;
		this.aspnetroleses = aspnetroleses;
	}

	@Id

	@Column(name = "Id", unique = true, nullable = false, length = 128)
	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	@Column(name = "Email", length = 256)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "EmailConfirmed", nullable = false)
	public boolean isEmailConfirmed() {
		return this.emailConfirmed;
	}

	public void setEmailConfirmed(boolean emailConfirmed) {
		this.emailConfirmed = emailConfirmed;
	}

	@Column(name = "PasswordHash")
	public String getPasswordHash() {
		return this.passwordHash;
	}

	public void setPasswordHash(String passwordHash) {
		this.passwordHash = passwordHash;
	}

	@Column(name = "SecurityStamp")
	public String getSecurityStamp() {
		return this.securityStamp;
	}

	public void setSecurityStamp(String securityStamp) {
		this.securityStamp = securityStamp;
	}

	@Column(name = "PhoneNumber")
	public String getPhoneNumber() {
		return this.phoneNumber;
	}

	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}

	@Column(name = "PhoneNumberConfirmed", nullable = false)
	public boolean isPhoneNumberConfirmed() {
		return this.phoneNumberConfirmed;
	}

	public void setPhoneNumberConfirmed(boolean phoneNumberConfirmed) {
		this.phoneNumberConfirmed = phoneNumberConfirmed;
	}

	@Column(name = "TwoFactorEnabled", nullable = false)
	public boolean isTwoFactorEnabled() {
		return this.twoFactorEnabled;
	}

	public void setTwoFactorEnabled(boolean twoFactorEnabled) {
		this.twoFactorEnabled = twoFactorEnabled;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "LockoutEndDateUtc", length = 19)
	public Date getLockoutEndDateUtc() {
		return this.lockoutEndDateUtc;
	}

	public void setLockoutEndDateUtc(Date lockoutEndDateUtc) {
		this.lockoutEndDateUtc = lockoutEndDateUtc;
	}

	@Column(name = "LockoutEnabled", nullable = false)
	public boolean isLockoutEnabled() {
		return this.lockoutEnabled;
	}

	public void setLockoutEnabled(boolean lockoutEnabled) {
		this.lockoutEnabled = lockoutEnabled;
	}

	@Column(name = "AccessFailedCount", nullable = false)
	public int getAccessFailedCount() {
		return this.accessFailedCount;
	}

	public void setAccessFailedCount(int accessFailedCount) {
		this.accessFailedCount = accessFailedCount;
	}

	@Column(name = "UserName", unique = true, nullable = false, length = 256)
	public String getUserName() {
		return this.userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	@Column(name = "Discriminator", nullable = false, length = 128)
	public String getDiscriminator() {
		return this.discriminator;
	}

	public void setDiscriminator(String discriminator) {
		this.discriminator = discriminator;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "aspnetusers")
	public Set<Invitations> getInvitationses() {
		return this.invitationses;
	}

	public void setInvitationses(Set<Invitations> invitationses) {
		this.invitationses = invitationses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "aspnetusers")
	public Set<Voluntaryactions> getVoluntaryactionses() {
		return this.voluntaryactionses;
	}

	public void setVoluntaryactionses(Set<Voluntaryactions> voluntaryactionses) {
		this.voluntaryactionses = voluntaryactionses;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "voluntaryactionvolunteers", catalog = "vasp", joinColumns = {
			@JoinColumn(name = "Volunteer_Id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "VoluntaryAction_ActionId", nullable = false, updatable = false) })
	public Set<Voluntaryactions> getVoluntaryactionses_1() {
		return this.voluntaryactionses_1;
	}

	public void setVoluntaryactionses_1(Set<Voluntaryactions> voluntaryactionses_1) {
		this.voluntaryactionses_1 = voluntaryactionses_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "aspnetusers")
	public Set<Aspnetuserlogins> getAspnetuserloginses() {
		return this.aspnetuserloginses;
	}

	public void setAspnetuserloginses(Set<Aspnetuserlogins> aspnetuserloginses) {
		this.aspnetuserloginses = aspnetuserloginses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "aspnetusers")
	public Set<Donations> getDonationses() {
		return this.donationses;
	}

	public void setDonationses(Set<Donations> donationses) {
		this.donationses = donationses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "aspnetusers")
	public Set<Aspnetuserclaims> getAspnetuserclaimses() {
		return this.aspnetuserclaimses;
	}

	public void setAspnetuserclaimses(Set<Aspnetuserclaims> aspnetuserclaimses) {
		this.aspnetuserclaimses = aspnetuserclaimses;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "aspnetuserroles", catalog = "vasp", joinColumns = {
			@JoinColumn(name = "UserId", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "RoleId", nullable = false, updatable = false) })
	public Set<Aspnetroles> getAspnetroleses() {
		return this.aspnetroleses;
	}

	public void setAspnetroleses(Set<Aspnetroles> aspnetroleses) {
		this.aspnetroleses = aspnetroleses;
	}

}
